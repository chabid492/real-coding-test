Given an array of integers arr and a positive integer m, your task is to find the frequency of the most common 
element within each contiguous subarray of length m in arr.

Return an array of these highest frequencies among subarray elements, ordered by their corresponding subarray's 
starting index. You can look at the examples section for a better understanding.

Example

For arr = [1, 2] and m = 2, the output should be solution(arr, m) = [1].

example 1

arr contains only one contiguous subarray of length m = 2 - arr[0..1] = [1, 2]. This subarray contains 2 most 
frequent elements - 1 and 2, both having a frequency of 1. So, the answer is [1].

For arr = [1, 3, 2, 2, 3] and m = 4, the output should be solution(arr, m) = [2, 2].

example 2

arr contains two contiguous subarrays of length m = 4:

arr[0..3] = [1, 3, 2, 2] contains only one most frequent element - 2, and its frequency is 2.
arr[1..4] = [3, 2, 2, 3] contains two most frequent elements - 2 and 3, both of them have a frequency of 2.
Putting the answers for both subarrays together, we obtain the array [2, 2]
For arr = [2, 1, 2, 3, 3, 2, 2, 2, 2, 1] and m = 3, the output should be solution(arr, m) = [2, 1, 2, 2, 2, 3, 3, 2].

example 3

arr contains 8 contiguous subarrays of length m = 3:

arr[0..2] = [2, 1, 2] contains only one most frequent element - 2, and its frequency is 2.
arr[1..3] = [1, 2, 3] contains three most frequent elements - 1, 2, and 3. All of them have frequency 1.
arr[2..4] = [2, 3, 3] contains only one most frequent element - 3, and its frequency is 2.
arr[3..5] = [3, 3, 2] contains only one most frequent element - 3, and its frequency is 2.
arr[4..6] = [3, 2, 2] contains only one most frequent element - 2, and its frequency is 2.
arr[5..7] = [2, 2, 2] contains only one most frequent element - 2, and its frequency is 3.
arr[6..8] = [2, 2, 2] contains only one most frequent element - 2, and its frequency is 3.
arr[7..9] = [2, 2, 1] contains only one most frequent element - 1, and its frequency is 2.
Putting the answers for both subarrays together, we obtain the array [2, 1, 2, 2, 2, 3, 3, 2].
Input/Output

[execution time limit] 4 seconds (php)

[input] array.integer arr

An array of integers.

Guaranteed constraints:
2 ≤ arr.length ≤ 105,
-109 ≤ arr[i] ≤ 109.

[input] integer m

An integer representing the length of each subarray.

Guaranteed constraints:
2 ≤ m ≤ arr.length.

[output] array.integer

An array of the highest frequencies in each contiguous subarray of length m in arr.

[PHP] Syntax Tips

// Prints help message to the console
// Returns a string
function helloWorld($name) {
    print "This prints to the console when you Run Tests";
    return "Hello, " . $name;
}


********************************************Solution*************
function solution(arr=[],m){
  if(arr.length < 0 && arr.length > 105){
    return ;
  }
  console.log(arr);
  var arrLen=arr.length; var i=0;
  var tempArr=arr; var arrB=[]; var j=0;
  for(i; i <= (arrLen-m); i++){
      var max=0,result,freq = 0;
      j=i;
    for(j; j < m; j++){
      console.log(j);
        if(arr[j]===arr[j+1]){
            freq++;
        }
        else {
            freq=0;
        }
        if(freq>max){
            result = arr[j];
            max = freq;
        }
    }
    m++;
    console.log(result);
  }
}

var arr=[1, 3, 2, 2, 3]; var m=4;
solution(arr,m);
**************************************